{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["downloadShortcut","url","Promise","resolve","reject","request","XMLHttpRequest","open","concat","encodeURIComponent","responseType","onload","e","send","App","props","_this","Object","_Users_pfg_Dev_Node_shortcut_preview_icloud_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","_Users_pfg_Dev_Node_shortcut_preview_icloud_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_Users_pfg_Dev_Node_shortcut_preview_icloud_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","state","data","undefined","loading","setState","shortcut","URLSearchParams","window","location","search","get","load","acceptedFiles","_rejectedFiles","_event","_this2","reader","FileReader","onabort","alert","onerror","binaryStr","result","bplistparser","Buffer","forEach","file","readAsArrayBuffer","console","log","response","keys","preview","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","shortcut_preview__WEBPACK_IMPORTED_MODULE_10___default","className","react_dropzone__WEBPACK_IMPORTED_MODULE_11__","onDrop","bind","_ref","getRootProps","getInputProps","Component","Boolean","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOASA,SAASA,EAAiBC,GACzB,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC5B,IAAMC,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAb,gDAAAC,OAAoEC,mBAAmBR,KACvFI,EAAQK,aAAe,cACvBL,EAAQM,OAAO,SAAAC,GAAMT,EAAQE,IAC7BA,EAAQQ,aAWJC,cACL,SAAAA,EAAYC,GAAqB,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChCE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,UAAMC,EAAWC,SAAS,GAExCV,EAAKW,SAAS,CAACD,SAAS,IACxB,IACME,EADY,IAAIC,gBAAgBC,OAAOC,SAASC,QAC3BC,IAAI,YAC/B,OAAIL,GAIJZ,EAAKkB,KAAKN,GAXsBZ,IAQ/BA,EAAKW,SAAS,CAACD,SAAS,IACxBT,OAAAG,EAAA,EAAAH,CAAAD,wEAIKmB,EAAuBC,EAAwBC,GAAmB,IAAAC,EAAAnB,KAClEoB,EAAS,IAAIC,WAEnBD,EAAOE,QAAU,kBAAMC,MAAM,6BAC7BH,EAAOI,QAAU,kBAAMD,MAAM,4BAC7BH,EAAO5B,OAAS,WAEf,IAAMiC,EAAYL,EAAOM,OACnBA,EAASC,cAAyB,IAAIC,EAAOH,IACnDN,EAAKX,SAAS,CAACH,KAAMqB,EAAQnB,SAAS,KAGvCS,EAAca,QAAQ,SAAAC,GAAI,OAAIV,EAAOW,kBAAkBD,0EAE7CrB,kGAE4B5B,EAAiB4B,UAAhDiB,SACNM,QAAQC,IAAIP,EAAQA,EAAOQ,SAAUpC,OAAOqC,KAAKT,IACjD1B,KAAKQ,SAAS,CACbH,KAAMsB,cAAyB,IAAIC,EAAOF,EAAOQ,6DAGlDlC,KAAKQ,SAAS,CAACD,SAAS,iJAIzB,IAAI6B,EAIJ,OAHqBA,EAAlBpC,KAAKI,MAAMC,KAAiBgC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAiBjC,KAAML,KAAKI,MAAMC,OACzDL,KAAKI,MAAMG,QAAoB8B,EAAAC,EAAAC,cAAA,yBACxBF,EAAAC,EAAAC,cAAA,oCAEdF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACdJ,EAAAC,EAAAC,cAAA,iCACCH,EACDC,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAUC,OAAQ3C,KAAK2C,OAAOC,KAAK5C,OACjC,SAAA6C,GAAA,IAAEC,EAAFD,EAAEC,aAAcC,EAAhBF,EAAgBE,cAAhB,OACAV,EAAAC,EAAAC,cAAA,eACCF,EAAAC,EAAAC,cAAA,MAASO,IACRT,EAAAC,EAAAC,cAAA,QAAWQ,KACXV,EAAAC,EAAAC,cAAA,uDArDUS,aA+DHrD,wLC7EKsD,QACU,cAA7BtC,OAAOC,SAASsC,UAEgB,UAA7BvC,OAAOC,SAASsC,UAEhBvC,OAAOC,SAASsC,SAASC,MACxB,2DCZLC,IAASC,OAAOC,EAAAhB,EAAAC,cAAC5C,EAAA,EAAD,MAAS4D,SAASC,eAAe,SDmI5C,kBAAmBC,WACtBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GAClCA,EAAaC","file":"static/js/main.26fd5c07.chunk.js","sourcesContent":["import React, { Component, useCallback } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport * as bplistparser from \"bplist-parser\";\nimport ShortcutPreview from \"shortcut-preview\";\n\nimport Dropzone, {useDropzone, DropEvent} from \"react-dropzone\";\n\n\nfunction downloadShortcut(url: string) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst request = new XMLHttpRequest();\n\t\trequest.open(\"GET\", `https://shortcutsweb.app/inspectshortcut?url=${encodeURIComponent(url)}`);\n\t\trequest.responseType = \"arraybuffer\";\n\t\trequest.onload=e => {resolve(request);};\n\t\trequest.send();\n\t});\n}\n\n// bplistparser .parserfile accepts a first argument of a buffer!!!\n\n// request = new XMLHttpRequest();request.open(\"GET\", \"https://www.icloud.com/shortcuts/api/records/d433de99a9ef4b3aac65d46b065c4cc1\");request.send();request.onreadystatechange=(e)=>console.log(request, e);\n// request = new XMLHttpRequest();request.open(\"GET\", \"https://cvws.icloud-content.com/B/AVpo4RcpK-RL_6EFrBUIYin_DGXJ/filename.shortcut?o=AhmCh_eq9R__UO_LoM1SVmM0W3NHRfEnLPUdVxODbct1sYckxbJbaSAEmpZy6Dm2bQ&v=1&x=3&a=B4eNtLgXqNR2oSjBTQT2zecqN7fLA63MSQEAAANxzEk&e=1552495483&k=_&fl=&r=568d89e6-0ec3-4862-b42c-b3317468e6ce-1&ckc=com.apple.shortcuts&ckz=_defaultZone&p=33&s=mPBj-NM_0H7lAUI4wzmbvEI1HfM\");request.send();request.onreadystatechange=(e)=>console.log(request, e);\n// request = https://shortcutsweb.app/inspectshortcut?url=[icloud link]\n\n\nclass App extends Component<{}, {data: any | undefined, loading: boolean}> {\n\tconstructor(props: Readonly<{}>) {\n\t\tsuper(props);\n\t\tthis.state = {data: undefined, loading: true};\n\n\t\tthis.setState({loading: true});\n\t\tconst urlParams = new URLSearchParams(window.location.search);\n\t\tconst shortcut = urlParams.get(\"shortcut\");\n\t\tif(!shortcut) {\n\t\t\tthis.setState({loading: false});\n\t\t\treturn;\n\t\t}\n\t\tthis.load(shortcut);\n\t}\n\tonDrop(acceptedFiles: File[], _rejectedFiles: File[], _event: DropEvent) {\n\t\tconst reader = new FileReader();\n\n\t\treader.onabort = () => alert(\"file reading was aborted\");\n\t\treader.onerror = () => alert(\"file reading has failed\");\n\t\treader.onload = () => {\n\t\t\t// Do whatever you want with the file contents\n\t\t\tconst binaryStr = reader.result as ArrayBuffer;\n\t\t\tconst result = bplistparser.parseBuffer(new Buffer(binaryStr));\n\t\t\tthis.setState({data: result, loading: false});\n\t\t};\n\n\t\tacceptedFiles.forEach(file => reader.readAsArrayBuffer(file));\n\t}\n\tasync load(shortcut: string) {\n\t\ttry{\n\t\t\tconst result: XMLHttpRequest = await downloadShortcut(shortcut) as XMLHttpRequest;\n\t\t\tconsole.log(result, result.response, Object.keys(result));\n\t\t\tthis.setState({\n\t\t\t\tdata: bplistparser.parseBuffer(new Buffer(result.response as ArrayBuffer))\n\t\t\t});\n\t\t}catch(er) {\n\t\t\tthis.setState({loading: false});\n\t\t}\n\t}\n\trender() {\n\t\tlet preview;\n\t\tif(this.state.data) {preview = <ShortcutPreview data={this.state.data} />;}\n\t\telse if(this.state.loading) {preview = <div>Loading...</div>;}\n\t\telse{preview = <div>No shortcut selected.</div>;}\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Preview of shortcut</h1>\n\t\t\t\t{preview}\n\t\t\t\t<Dropzone onDrop={this.onDrop.bind(this)}>\n\t\t\t\t\t{({getRootProps, getInputProps}) => (\n\t\t\t\t\t\t<section>\n\t\t\t\t\t\t\t<div {...getRootProps()}>\n\t\t\t\t\t\t\t\t<input {...getInputProps()} />\n\t\t\t\t\t\t\t\t<p>Click to choose .shortcut file</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t)}\n\t\t\t\t</Dropzone>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n    \t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(\n\t\t\t(process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n\t\t\twindow.location.href\n\t\t);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}