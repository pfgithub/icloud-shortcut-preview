{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["downloadShortcut","id","Promise","all","resolve","reject","request","XMLHttpRequest","open","concat","encodeURIComponent","responseType","onload","e","response","onerror","onabort","send","undefined","App","props","_this","Object","_home_pfg_Dev_Node_icloud_shortcut_preview_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","this","_home_pfg_Dev_Node_icloud_shortcut_preview_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__","_home_pfg_Dev_Node_icloud_shortcut_preview_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__","call","state","data","loading","shortcutData","shortcutID","setState","urlParams","URLSearchParams","window","location","search","console","log","shortcut","get","match","load","acceptedFiles","_rejectedFiles","_event","_this2","reader","FileReader","alert","binaryStr","result","bplistparser","Buffer","forEach","file","readAsArrayBuffer","react__WEBPACK_IMPORTED_MODULE_8___default","a","createElement","className","react_helmet__WEBPACK_IMPORTED_MODULE_12__","name","rel","type","href","icon","src","downloadURL","shortcut_preview__WEBPACK_IMPORTED_MODULE_11___default","react_dropzone__WEBPACK_IMPORTED_MODULE_13__","onDrop","bind","_ref3","getRootProps","getInputProps","assign","method","Component","Boolean","hostname","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b535cc94.chunk.js","sourcesContent":["import React, { Component, useCallback } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport * as bplistparser from \"bplist-parser\";\nimport ShortcutPreview from \"shortcut-preview\";\n\nimport {Helmet} from \"react-helmet\";\nimport Dropzone, {useDropzone, DropEvent} from \"react-dropzone\";\n\ntype ShortcutData = {result: boolean, name: string, icon: string, downloadURL: string};\n\nfunction downloadShortcut(id: string): Promise<[ArrayBuffer | undefined, ShortcutData | undefined]> {\n\t// @ts-ignore\n\treturn Promise.all([\n\t\tnew Promise((resolve, reject) => {\n\t\t\tconst request = new XMLHttpRequest();\n\t\t\trequest.open(\"GET\", `https://shortcutsweb.app/inspectshortcut?id=${encodeURIComponent(id)}`);\n\t\t\trequest.responseType = \"arraybuffer\";\n\t\t\trequest.onload = e => {resolve(request.response as ArrayBuffer);};\n\t\t\trequest.onerror = e => reject(e);\n\t\t\trequest.onabort = e => reject(e);\n\t\t\trequest.send();\n\t\t}), new Promise((resolve, reject) => {\n\t\t\tconst request = new XMLHttpRequest();\n\t\t\trequest.open(\"GET\", `https://shortcutsweb.app/inspectshortcut?id=${encodeURIComponent(id)}&info=basic`);\n\t\t\trequest.responseType = \"json\";\n\t\t\trequest.onload=e => {resolve(request.response as ShortcutData);};\n\t\t\trequest.onerror=e => resolve(undefined);\n\t\t\trequest.onabort=e => resolve(undefined);\n\t\t\trequest.send();\n\t\t})\n\t]);\n}\n\n// bplistparser .parserfile accepts a first argument of a buffer!!!\n\n// request = new XMLHttpRequest();request.open(\"GET\", \"https://www.icloud.com/shortcuts/api/records/d433de99a9ef4b3aac65d46b065c4cc1\");request.send();request.onreadystatechange=(e)=>console.log(request, e);\n// request = new XMLHttpRequest();request.open(\"GET\", \"https://cvws.icloud-content.com/B/AVpo4RcpK-RL_6EFrBUIYin_DGXJ/filename.shortcut?o=AhmCh_eq9R__UO_LoM1SVmM0W3NHRfEnLPUdVxODbct1sYckxbJbaSAEmpZy6Dm2bQ&v=1&x=3&a=B4eNtLgXqNR2oSjBTQT2zecqN7fLA63MSQEAAANxzEk&e=1552495483&k=_&fl=&r=568d89e6-0ec3-4862-b42c-b3317468e6ce-1&ckc=com.apple.shortcuts&ckz=_defaultZone&p=33&s=mPBj-NM_0H7lAUI4wzmbvEI1HfM\");request.send();request.onreadystatechange=(e)=>console.log(request, e);\n// request = https://shortcutsweb.app/inspectshortcut?url=[icloud link]\n\n\nclass App extends Component<{}, {data: any | undefined, loading: boolean, shortcutData: ShortcutData | undefined, shortcutID: string | undefined}> {\n\tconstructor(props: Readonly<{}>) {\n\t\tsuper(props);\n\t\tthis.state = {data: undefined, loading: true, shortcutData: undefined, shortcutID: undefined};\n\t}\n\tcomponentDidMount() {\n\t\tthis.setState({loading: true});\n\t\tconst urlParams = new URLSearchParams(window.location.search);\n\t\tconsole.log(\"urlparams\");\n\t\tconst shortcut = urlParams.get(\"shortcut\");\n\t\tif(!shortcut) {\n\t\t\tconsole.log(\"!shortcut\");\n\t\t\tthis.setState({loading: false});\n\t\t\treturn;\n\t\t}\n\t\tconst shortcutID = shortcut.match(/[a-z0-9]{32}/);\n\t\tif(!shortcutID) {\n\t\t\tconsole.log(\"!shortcutid\");\n\t\t\tthis.setState({loading: false});\n\t\t\treturn;\n\t\t}\n\t\tthis.setState({loading: true, shortcutID: shortcutID[0]});\n\t\tthis.load(shortcutID[0]);\n\t}\n\tonDrop(acceptedFiles: File[], _rejectedFiles: File[], _event: DropEvent) {\n\t\tconst reader = new FileReader();\n\n\t\treader.onabort = () => alert(\"file reading was aborted\");\n\t\treader.onerror = () => alert(\"file reading has failed\");\n\t\treader.onload = () => {\n\t\t\t// Do whatever you want with the file contents\n\t\t\tconst binaryStr = reader.result as ArrayBuffer;\n\t\t\tconst result = bplistparser.parseBuffer(new Buffer(binaryStr));\n\t\t\tthis.setState({data: result, loading: false});\n\t\t};\n\n\t\tacceptedFiles.forEach(file => reader.readAsArrayBuffer(file));\n\t}\n\tasync load(shortcut: string) {\n\t\ttry{\n\t\t\tconst [result, shortcutData]: [ArrayBuffer | undefined, ShortcutData | undefined] = await downloadShortcut(shortcut);\n\t\t\tif(!result) {\n\t\t\t\tthis.setState({loading: false});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tdata: bplistparser.parseBuffer(new Buffer(result)),\n\t\t\t\tshortcutData: shortcutData\n\t\t\t});\n\t\t}catch(er) {\n\t\t\tthis.setState({loading: false});\n\t\t}\n\t}\n\trender() {\n\t\tif(this.state.data) {\n\t\t\tif(this.state.shortcutData) {\n\t\t\t\treturn <div className=\"App\">\n\t\t\t\t\t<Helmet>\n\t\t\t\t\t\t<title>{this.state.shortcutData.name} - Preview</title>\n\t\t\t\t\t\t<link rel=\"icon\" type=\"image/png\" href={this.state.shortcutData.icon} />\n\t\t\t\t\t</Helmet>\n\t\t\t\t\t<header className=\"center\">\n\t\t\t\t\t\t<img src={this.state.shortcutData.icon}/><h1 className=\"shortcutName\">{this.state.shortcutData.name}</h1>\n\t\t\t\t\t\t<p><a href={this.state.shortcutData.downloadURL}>Download .shortcut</a></p>\n\t\t\t\t\t\t{this.state.shortcutID ? <p><a href={`https://www.icloud.com/shortcuts/${this.state.shortcutID}`}>View iCloud Page</a></p> : undefined}\n\t\t\t\t\t</header>\n\t\t\t\t\t<ShortcutPreview data={this.state.data} />\n\t\t\t\t</div>;\n\t\t\t}\n\t\t\treturn <div className=\"App\">\n\t\t\t\t<ShortcutPreview data={this.state.data} />\n\t\t\t</div>;\n\t\t}\n\t\telse if(this.state.loading) {\n\t\t\treturn <div className=\"App\">\n\t\t\t\t<div>Loading...</div>\n\t\t\t</div>;\n\t\t}\n\t\treturn <div className=\"App\">\n\t\t\t<div className=\"fullCenter\">\n\t\t\t\t<div className=\"split\">\n\t\t\t\t\t<Dropzone onDrop={this.onDrop.bind(this)}>\n\t\t\t\t\t\t{({getRootProps, getInputProps}) => (\n\t\t\t\t\t\t\t<div className=\"item fullsize\" {...getRootProps()}>\n\t\t\t\t\t\t\t\t<div className=\"fileupload\">\n\t\t\t\t\t\t\t\t\t<input {...getInputProps()} />\n\t\t\t\t\t\t\t\t\t<p>Choose .shortcut file</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Dropzone>\n\t\t\t\t\t<div className=\"item\">or</div>\n\t\t\t\t\t<div className=\"item fullsize\">\n\t\t\t\t\t\t<form method=\"get\">\n\t\t\t\t\t\t\t<p>Enter iCloud URL</p>\n\t\t\t\t\t\t\t<input type=\"text\" name=\"shortcut\" />\n\t\t\t\t\t\t\t<button>go</button>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>;\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n    \t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(\n\t\t\t(process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n\t\t\twindow.location.href\n\t\t);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}